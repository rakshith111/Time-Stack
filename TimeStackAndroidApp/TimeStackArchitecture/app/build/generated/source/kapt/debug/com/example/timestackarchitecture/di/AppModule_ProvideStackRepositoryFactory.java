// Generated by Dagger (https://dagger.dev).
package com.example.timestackarchitecture.di;

import com.example.timestackarchitecture.casualmode.data.StackDatabase;
import com.example.timestackarchitecture.casualmode.data.StackRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideStackRepositoryFactory implements Factory<StackRepository> {
  private final Provider<StackDatabase> dbProvider;

  public AppModule_ProvideStackRepositoryFactory(Provider<StackDatabase> dbProvider) {
    this.dbProvider = dbProvider;
  }

  @Override
  public StackRepository get() {
    return provideStackRepository(dbProvider.get());
  }

  public static AppModule_ProvideStackRepositoryFactory create(Provider<StackDatabase> dbProvider) {
    return new AppModule_ProvideStackRepositoryFactory(dbProvider);
  }

  public static StackRepository provideStackRepository(StackDatabase db) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideStackRepository(db));
  }
}
